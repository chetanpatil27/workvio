'use client';

import React, { useState } from 'react';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Avatar,
  Chip,
  IconButton,
  Menu,
  MenuItem,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  LinearProgress,
  AvatarGroup,
  Tooltip,
  Paper,
  InputAdornment,
  TextField,
  Badge,
} from '@mui/material';
import {
  Add as AddIcon,
  MoreVert as MoreIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  Search as SearchIcon,
  FilterList as FilterIcon,
  Group as GroupIcon,
  Schedule as ScheduleIcon,
  TrendingUp as TrendingUpIcon,
  Assignment as AssignmentIcon,
} from '@mui/icons-material';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '@/store';
import { Project, addProject, removeProject } from '@/store/slices/project';
import { format } from 'date-fns';
import Input from '@/components/form-controls/input';
import CustomSelect from '@/components/form-controls/select';

export default function ProjectsPage() {
  const dispatch = useDispatch();
  const { projects } = useSelector((state: RootState) => state.project);
  const { sprints } = useSelector((state: RootState) => state.sprint);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    key: '',
    status: 'active',
    color: '#1976d2',
  });

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, projectId: string) => {
    event.stopPropagation();
    setAnchorEl(event.currentTarget);
    setSelectedProjectId(projectId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedProjectId(null);
  };

  const handleOpenDialog = (project?: Project) => {
    if (project) {
      setIsEditing(true);
      setFormData({
        name: project.name,
        description: project.description,
        key: project.key,
        status: project.status,
        color: project.color,
      });
    } else {
      setIsEditing(false);
      setFormData({
        name: '',
        description: '',
        key: '',
        status: 'active',
        color: '#1976d2',
      });
    }
    setDialogOpen(true);
    handleMenuClose();
  };

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setFormData({
      name: '',
      description: '',
      key: '',
      status: 'active',
      color: '#1976d2',
    });
  };

  const handleSubmit = () => {
    const newProject: Project = {
      id: isEditing ? selectedProjectId! : Date.now().toString(),
      name: formData.name,
      description: formData.description,
      key: formData.key,
      leadId: 'user1',
      status: formData.status as Project['status'],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      members: ['user1', 'user2', 'user3'],
      color: formData.color,
    };

    dispatch(addProject(newProject));
    handleCloseDialog();
  };

  const handleDelete = () => {
    if (selectedProjectId) {
      dispatch(removeProject(selectedProjectId));
    }
    handleMenuClose();
  };

  const getProjectSprints = (projectId: string) => {
    return sprints.filter(sprint => sprint.projectId === projectId);
  };

  const getActiveSprintsCount = (projectId: string) => {
    return sprints.filter(sprint => sprint.projectId === projectId && sprint.status === 'active').length;
  };

  const getProjectProgress = (projectId: string) => {
    const projectSprints = getProjectSprints(projectId);
    if (projectSprints.length === 0) return 0;
    
    const completedSprints = projectSprints.filter(sprint => sprint.status === 'completed').length;
    return (completedSprints / projectSprints.length) * 100;
  };

  const filteredProjects = projects.filter(project =>
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.key.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const statusColors = {
    active: 'success',
    inactive: 'warning',
    archived: 'default',
  } as const;

  return (
    <Box>
      {/* Header Section */}
      <Box sx={{ mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
          <Box>
            <Typography 
              variant="h4" 
              sx={{ 
                fontWeight: 700, 
                mb: 1,
                background: 'linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text',
              }}
            >
              Projects
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
              Manage and track your project portfolio
            </Typography>
            
            {/* Stats Cards */}
            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1.5,
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 2,
                  bgcolor: 'background.paper'
                }}
              >
                <Avatar sx={{ bgcolor: 'primary.main', width: 40, height: 40 }}>
                  <AssignmentIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {projects.length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Total Projects
                  </Typography>
                </Box>
              </Paper>
              
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1.5,
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 2,
                  bgcolor: 'background.paper'
                }}
              >
                <Avatar sx={{ bgcolor: 'success.main', width: 40, height: 40 }}>
                  <TrendingUpIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {projects.filter(p => p.status === 'active').length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Active Projects
                  </Typography>
                </Box>
              </Paper>
            </Box>
          </Box>
          
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => handleOpenDialog()}
            size="large"
            sx={{
              borderRadius: 2,
              px: 3,
              py: 1.5,
              boxShadow: '0 4px 12px rgba(25, 118, 210, 0.3)',
              '&:hover': {
                boxShadow: '0 6px 16px rgba(25, 118, 210, 0.4)',
              },
            }}
          >
            Create Project
          </Button>
        </Box>

        {/* Search and Filter */}
        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
          <TextField
            placeholder="Search projects..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon color="action" />
                </InputAdornment>
              ),
            }}
            sx={{
              minWidth: 300,
              '& .MuiOutlinedInput-root': {
                borderRadius: 2,
              },
            }}
          />
          <Tooltip title="Filter projects">
            <IconButton sx={{ border: '1px solid', borderColor: 'divider', borderRadius: 2 }}>
              <FilterIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Projects Grid */}
      {filteredProjects.length > 0 ? (
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: {
              xs: '1fr',
              sm: 'repeat(2, 1fr)',
              lg: 'repeat(3, 1fr)',
              xl: 'repeat(4, 1fr)',
            },
            gap: 3,
          }}
        >
          {filteredProjects.map((project) => (
            <Card
              key={project.id}
              sx={{
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                border: '1px solid',
                borderColor: 'divider',
                borderRadius: 3,
                overflow: 'hidden',
                '&:hover': {
                  boxShadow: '0 8px 25px rgba(0,0,0,0.12)',
                  transform: 'translateY(-2px)',
                  borderColor: 'primary.main',
                },
              }}
            >
              <CardContent sx={{ flexGrow: 1, p: 3 }}>
                {/* Project Header */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                  <Avatar
                    sx={{
                      bgcolor: project.color,
                      color: 'white',
                      fontWeight: 600,
                      width: 48,
                      height: 48,
                      fontSize: '1.2rem',
                    }}
                  >
                    {project.key}
                  </Avatar>
                  <IconButton
                    size="small"
                    onClick={(e) => handleMenuClick(e, project.id)}
                    sx={{ 
                      opacity: 0.7,
                      '&:hover': { opacity: 1 }
                    }}
                  >
                    <MoreIcon />
                  </IconButton>
                </Box>

                {/* Project Info */}
                <Box sx={{ mb: 2 }}>
                  <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                    {project.name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1.5 }}>
                    {project.description}
                  </Typography>
                  <Chip
                    label={project.status}
                    color={statusColors[project.status]}
                    size="small"
                    sx={{ textTransform: 'capitalize' }}
                  />
                </Box>

                {/* Project Stats */}
                <Box sx={{ mb: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Progress
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {Math.round(getProjectProgress(project.id))}%
                    </Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={getProjectProgress(project.id)}
                    sx={{
                      height: 6,
                      borderRadius: 3,
                      backgroundColor: 'rgba(0,0,0,0.1)',
                      '& .MuiLinearProgress-bar': {
                        borderRadius: 3,
                        backgroundColor: project.color,
                      },
                    }}
                  />
                </Box>

                {/* Bottom Stats */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <ScheduleIcon sx={{ fontSize: 16, color: 'text.secondary' }} />
                    <Typography variant="body2" color="text.secondary">
                      {getProjectSprints(project.id).length} sprints
                    </Typography>
                  </Box>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Badge 
                      badgeContent={getActiveSprintsCount(project.id)} 
                      color="success"
                      sx={{ '& .MuiBadge-badge': { fontSize: '0.6rem', minWidth: 16, height: 16 } }}
                    >
                      <GroupIcon sx={{ fontSize: 16, color: 'text.secondary' }} />
                    </Badge>
                    <AvatarGroup 
                      max={3} 
                      sx={{ 
                        '& .MuiAvatar-root': { 
                          width: 24, 
                          height: 24, 
                          fontSize: '0.7rem',
                          border: '1px solid',
                          borderColor: 'background.paper',
                        } 
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#1976d2' }}>J</Avatar>
                      <Avatar sx={{ bgcolor: '#2e7d32' }}>S</Avatar>
                      <Avatar sx={{ bgcolor: '#ed6c02' }}>M</Avatar>
                      <Avatar sx={{ bgcolor: '#d32f2f' }}>A</Avatar>
                    </AvatarGroup>
                  </Box>
                </Box>

                {/* Updated Date */}
                <Box sx={{ pt: 2, borderTop: '1px solid', borderColor: 'divider', mt: 2 }}>
                  <Typography variant="caption" color="text.secondary">
                    Updated {format(new Date(project.updatedAt), 'MMM dd, yyyy')}
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          ))}
        </Box>
      ) : (
        /* Empty State */
        <Paper
          sx={{
            textAlign: 'center',
            py: 8,
            px: 4,
            border: '2px dashed',
            borderColor: 'divider',
            borderRadius: 3,
            bgcolor: 'background.paper',
          }}
        >
          <Avatar
            sx={{
              width: 64,
              height: 64,
              bgcolor: 'primary.light',
              mx: 'auto',
              mb: 2,
            }}
          >
            <AssignmentIcon sx={{ fontSize: 32 }} />
          </Avatar>
          <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
            {searchTerm ? 'No projects found' : 'No projects yet'}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            {searchTerm 
              ? 'Try adjusting your search criteria'
              : 'Create your first project to get started'
            }
          </Typography>
          {!searchTerm && (
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => handleOpenDialog()}
              size="large"
            >
              Create Project
            </Button>
          )}
        </Paper>
      )}

      {/* Context Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          sx: {
            borderRadius: 2,
            boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
            border: '1px solid',
            borderColor: 'divider',
          },
        }}
      >
        <MenuItem onClick={() => console.log('View project')}>
          <ViewIcon sx={{ mr: 1 }} />
          View Details
        </MenuItem>
        <MenuItem onClick={() => {
          const project = projects.find(p => p.id === selectedProjectId);
          if (project) handleOpenDialog(project);
        }}>
          <EditIcon sx={{ mr: 1 }} />
          Edit
        </MenuItem>
        <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>
          <DeleteIcon sx={{ mr: 1 }} />
          Delete
        </MenuItem>
      </Menu>

      {/* Create/Edit Dialog */}
      <Dialog 
        open={dialogOpen} 
        onClose={handleCloseDialog} 
        maxWidth="sm" 
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
          },
        }}
      >
        <DialogTitle sx={{ pb: 1 }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            {isEditing ? 'Edit Project' : 'Create New Project'}
          </Typography>
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2.5, pt: 1 }}>
            <Input
              label="Project Name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              fullWidth
              isRequired
            />
            <Input
              label="Project Key"
              value={formData.key}
              onChange={(e) => setFormData({ ...formData, key: e.target.value.toUpperCase() })}
              placeholder="e.g., PROJ"
              fullWidth
              isRequired
            />
            <Input
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              multiline
              rows={3}
              fullWidth
            />
            <CustomSelect
              label="Status"
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as string })}
              options={[
                { value: 'active', label: 'Active' },
                { value: 'inactive', label: 'Inactive' },
                { value: 'archived', label: 'Archived' },
              ]}
              fullWidth
            />
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 1 }}>
          <Button 
            onClick={handleCloseDialog}
            sx={{ borderRadius: 2 }}
          >
            Cancel
          </Button>
          <Button 
            variant="contained" 
            onClick={handleSubmit}
            disabled={!formData.name.trim() || !formData.key.trim()}
            sx={{ borderRadius: 2 }}
          >
            {isEditing ? 'Update' : 'Create'} Project
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}

  const handleMenuClick = (event: React.MouseEvent<HTMLElement>, projectId: string) => {
    event.stopPropagation();
    setAnchorEl(event.currentTarget);
    setSelectedProjectId(projectId);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedProjectId(null);
  };

  const handleOpenDialog = (project?: Project) => {
    if (project) {
      setIsEditing(true);
      setFormData({
        name: project.name,
        description: project.description,
        key: project.key,
        status: project.status,
        color: project.color,
      });
    } else {
      setIsEditing(false);
      setFormData({
        name: '',
        description: '',
        key: '',
        status: 'active',
        color: '#1976d2',
      });
    }
    setDialogOpen(true);
    handleMenuClose();
  };

  const handleCloseDialog = () => {
    setDialogOpen(false);
    setFormData({
      name: '',
      description: '',
      key: '',
      status: 'active',
      color: '#1976d2',
    });
  };

  const handleSubmit = () => {
    const newProject: Project = {
      id: isEditing ? selectedProjectId! : Date.now().toString(),
      name: formData.name,
      description: formData.description,
      key: formData.key,
      leadId: 'user1',
      status: formData.status as Project['status'],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      members: ['user1', 'user2', 'user3'],
      color: formData.color,
    };

    dispatch(addProject(newProject));
    handleCloseDialog();
  };

  const handleDelete = () => {
    if (selectedProjectId) {
      dispatch(removeProject(selectedProjectId));
    }
    handleMenuClose();
  };

  const getProjectSprints = (projectId: string) => {
    return sprints.filter(sprint => sprint.projectId === projectId);
  };

  const getActiveSprintsCount = (projectId: string) => {
    return sprints.filter(sprint => sprint.projectId === projectId && sprint.status === 'active').length;
  };

  const getProjectProgress = (projectId: string) => {
    const projectSprints = getProjectSprints(projectId);
    if (projectSprints.length === 0) return 0;
    
    const completedSprints = projectSprints.filter(sprint => sprint.status === 'completed').length;
    return (completedSprints / projectSprints.length) * 100;
  };

  const filteredProjects = projects.filter(project =>
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    project.key.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <Box>
      {/* Header Section */}
      <Box sx={{ mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
          <Box>
            <Typography 
              variant="h4" 
              sx={{ 
                fontWeight: 700, 
                mb: 1,
                background: 'linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text',
              }}
            >
              Projects
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
              Manage and track your project portfolio
            </Typography>
            
            {/* Stats Cards */}
            <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1.5,
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 2,
                  bgcolor: 'background.paper'
                }}
              >
                <Avatar sx={{ bgcolor: 'primary.main', width: 40, height: 40 }}>
                  <AssignmentIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {projects.length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Total Projects
                  </Typography>
                </Box>
              </Paper>
              
              <Paper 
                elevation={0} 
                sx={{ 
                  p: 2, 
                  display: 'flex', 
                  alignItems: 'center', 
                  gap: 1.5,
                  border: '1px solid',
                  borderColor: 'divider',
                  borderRadius: 2,
                  bgcolor: 'background.paper'
                }}
              >
                <Avatar sx={{ bgcolor: 'success.main', width: 40, height: 40 }}>
                  <TrendingUpIcon />
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {projects.filter(p => p.status === 'active').length}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    Active Projects
                  </Typography>
                </Box>
              </Paper>
            </Box>
          </Box>
          
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={() => handleOpenDialog()}
            size="large"
            sx={{
              borderRadius: 2,
              px: 3,
              py: 1.5,
              boxShadow: '0 4px 12px rgba(25, 118, 210, 0.3)',
              '&:hover': {
                boxShadow: '0 6px 16px rgba(25, 118, 210, 0.4)',
              },
            }}
          >
            Create Project
          </Button>
        </Box>

        {/* Search and Filter */}
        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
          <TextField
            placeholder="Search projects..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            size="small"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon color="action" />
                </InputAdornment>
              ),
            }}
            sx={{
              minWidth: 300,
              '& .MuiOutlinedInput-root': {
                borderRadius: 2,
              },
            }}
          />
          <Tooltip title="Filter projects">
            <IconButton sx={{ border: '1px solid', borderColor: 'divider', borderRadius: 2 }}>
              <FilterIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Projects Grid */}
      {filteredProjects.length > 0 ? (
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: {
              xs: '1fr',
              sm: 'repeat(2, 1fr)',
              lg: 'repeat(3, 1fr)',
              xl: 'repeat(4, 1fr)',
            },
            gap: 3,
          }}
        >
          {filteredProjects.map((project) => (
            <Card
              key={project.id}
              sx={{
                height: '100%',
                display: 'flex',
                flexDirection: 'column',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                border: '1px solid',
                borderColor: 'divider',
                borderRadius: 3,
                overflow: 'hidden',
                '&:hover': {
                  boxShadow: '0 8px 25px rgba(0,0,0,0.12)',
                  transform: 'translateY(-2px)',
                  borderColor: 'primary.main',
                },
              }}
            >
              <CardContent sx={{ flexGrow: 1, p: 3 }}>
                {/* Project Header */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                  <Avatar
                    sx={{
                      bgcolor: project.color,
                      color: 'white',
                      fontWeight: 600,
                      width: 48,
                      height: 48,
                      fontSize: '1.2rem',
                    }}
                  >
                    {project.key}
                  </Avatar>
                  <IconButton
                    size="small"
                    onClick={(e) => handleMenuClick(e, project.id)}
                    sx={{ 
                      opacity: 0.7,
                      '&:hover': { opacity: 1 }
                    }}
                  >
                    <MoreIcon />
                  </IconButton>
                </Box>

                {/* Project Info */}
                <Box sx={{ mb: 2 }}>
                  <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                    {project.name}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 1.5 }}>
                    {project.description}
                  </Typography>
                  <Chip
                    label={project.status}
                    color={statusColors[project.status]}
                    size="small"
                    sx={{ textTransform: 'capitalize' }}
                  />
                </Box>

                {/* Project Stats */}
                <Box sx={{ mb: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                      Progress
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {Math.round(getProjectProgress(project.id))}%
                    </Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={getProjectProgress(project.id)}
                    sx={{
                      height: 6,
                      borderRadius: 3,
                      backgroundColor: 'rgba(0,0,0,0.1)',
                      '& .MuiLinearProgress-bar': {
                        borderRadius: 3,
                        backgroundColor: project.color,
                      },
                    }}
                  />
                </Box>

                {/* Bottom Stats */}
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <ScheduleIcon sx={{ fontSize: 16, color: 'text.secondary' }} />
                    <Typography variant="body2" color="text.secondary">
                      {getProjectSprints(project.id).length} sprints
                    </Typography>
                  </Box>
                  
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Badge 
                      badgeContent={getActiveSprintsCount(project.id)} 
                      color="success"
                      sx={{ '& .MuiBadge-badge': { fontSize: '0.6rem', minWidth: 16, height: 16 } }}
                    >
                      <GroupIcon sx={{ fontSize: 16, color: 'text.secondary' }} />
                    </Badge>
                    <AvatarGroup 
                      max={3} 
                      sx={{ 
                        '& .MuiAvatar-root': { 
                          width: 24, 
                          height: 24, 
                          fontSize: '0.7rem',
                          border: '1px solid',
                          borderColor: 'background.paper',
                        } 
                      }}
                    >
                      <Avatar sx={{ bgcolor: '#1976d2' }}>J</Avatar>
                      <Avatar sx={{ bgcolor: '#2e7d32' }}>S</Avatar>
                      <Avatar sx={{ bgcolor: '#ed6c02' }}>M</Avatar>
                      <Avatar sx={{ bgcolor: '#d32f2f' }}>A</Avatar>
                    </AvatarGroup>
                  </Box>
                </Box>

                {/* Updated Date */}
                <Box sx={{ pt: 2, borderTop: '1px solid', borderColor: 'divider', mt: 2 }}>
                  <Typography variant="caption" color="text.secondary">
                    Updated {format(new Date(project.updatedAt), 'MMM dd, yyyy')}
                  </Typography>
                </Box>
              </CardContent>
            </Card>
          ))}
        </Box>
      ) : (
        /* Empty State */
        <Paper
          sx={{
            textAlign: 'center',
            py: 8,
            px: 4,
            border: '2px dashed',
            borderColor: 'divider',
            borderRadius: 3,
            bgcolor: 'background.paper',
          }}
        >
          <Avatar
            sx={{
              width: 64,
              height: 64,
              bgcolor: 'primary.light',
              mx: 'auto',
              mb: 2,
            }}
          >
            <AssignmentIcon sx={{ fontSize: 32 }} />
          </Avatar>
          <Typography variant="h6" color="text.secondary" sx={{ mb: 1 }}>
            {searchTerm ? 'No projects found' : 'No projects yet'}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
            {searchTerm 
              ? 'Try adjusting your search criteria'
              : 'Create your first project to get started'
            }
          </Typography>
          {!searchTerm && (
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => handleOpenDialog()}
              size="large"
            >
              Create Project
            </Button>
          )}
        </Paper>
      )}

      {/* Context Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
        PaperProps={{
          sx: {
            borderRadius: 2,
            boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
            border: '1px solid',
            borderColor: 'divider',
          },
        }}
      >
        <MenuItem onClick={() => console.log('View project')}>
          <ViewIcon sx={{ mr: 1 }} />
          View Details
        </MenuItem>
        <MenuItem onClick={() => {
          const project = projects.find(p => p.id === selectedProjectId);
          if (project) handleOpenDialog(project);
        }}>
          <EditIcon sx={{ mr: 1 }} />
          Edit
        </MenuItem>
        <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>
          <DeleteIcon sx={{ mr: 1 }} />
          Delete
        </MenuItem>
      </Menu>

      {/* Create/Edit Dialog */}
      <Dialog 
        open={dialogOpen} 
        onClose={handleCloseDialog} 
        maxWidth="sm" 
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
          },
        }}
      >
        <DialogTitle sx={{ pb: 1 }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            {isEditing ? 'Edit Project' : 'Create New Project'}
          </Typography>
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2.5, pt: 1 }}>
            <Input
              label="Project Name"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              fullWidth
              isRequired
            />
            <Input
              label="Project Key"
              value={formData.key}
              onChange={(e) => setFormData({ ...formData, key: e.target.value.toUpperCase() })}
              placeholder="e.g., PROJ"
              fullWidth
              isRequired
            />
            <Input
              label="Description"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              multiline
              rows={3}
              fullWidth
            />
            <CustomSelect
              label="Status"
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as string })}
              options={[
                { value: 'active', label: 'Active' },
                { value: 'inactive', label: 'Inactive' },
                { value: 'archived', label: 'Archived' },
              ]}
              fullWidth
            />
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 3, pt: 1 }}>
          <Button 
            onClick={handleCloseDialog}
            sx={{ borderRadius: 2 }}
          >
            Cancel
          </Button>
          <Button 
            variant="contained" 
            onClick={handleSubmit}
            disabled={!formData.name.trim() || !formData.key.trim()}
            sx={{ borderRadius: 2 }}
          >
            {isEditing ? 'Update' : 'Create'} Project
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
}
